# -*- coding: utf-8 -*-
"""Credit Risk Prediction Case Study.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dxowWMdlMHS-J_muYK4fGA5NTtpQByxQ

#**Credit Risk Prediction Case Study**

---


#1. **Introduction**
Credit risk assessment is crucial for financial institutions, as it helps determine the likelihood of a borrower defaulting on a loan. This project employs machine learning techniques to develop a predictive model for assessing credit risk.

##**Objectives:**
- Identify key risk factors influencing loan default.
- Develop a predictive model using machine learning techniques.
- Provide actionable insights to enhance lending strategies and reduce financial losses.

##Importing Libraries
I'll start by importing the necessary libraries that i'll be using at the start of my analysis
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# Load the dataset
file_path = "/content/loan.xlsx"
xls = pd.ExcelFile("/content/loan.xlsx")

# Display sheet names to identify the relevant data
xls.sheet_names

# Display basic info
display(df.head())
display(df.info())

"""The dataset contains the following key features:

1.   Demographic Information: Age, Gender, Education, Home Ownership.
2.   Financial Details: Income, Employment Experience.
3.   Loan Characteristics: Loan Amount, Interest Rate, Loan Purpose.
4.   Credit History: Credit Score, Credit History Length, Previous Defaults.
5.   Target Variable: loan_status (1 = Default, 0 = Non-Default).

# 2. Data Preprocessing
## 2.1 Handling Of Missing Values
Missing values can distort model performance, so we remove rows with missing data. I will perform data cleaning and preprocessing, including handling missing values, encoding categorical variables, and scaling numerical features.
"""

# Check for missing values in the dataset
missing_values = df.isnull().sum()

# Display missing values summary
missing_values[missing_values > 0]

# Handling missing values
df.dropna(inplace=True)

"""There are no missing values in the dataset, which ensures data integrity.

## 2.2 Encoding Categorical Variables
I will encode categorical variables and scale numerical features for better model performance. ​
"""

from sklearn.preprocessing import LabelEncoder, StandardScaler

# Identify categorical and numerical columns
categorical_columns = ["person_gender", "person_education", "person_home_ownership", "loan_intent", "previous_loan_defaults_on_file"]
numerical_columns = ["person_age", "person_income", "person_emp_exp", "loan_amnt", "loan_int_rate", "loan_percent_income",
                      "cb_person_cred_hist_length", "credit_score"]

# Encode categorical variables using Label Encoding
label_encoders = {}
for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Scale numerical variables
scaler = StandardScaler()
df[numerical_columns] = scaler.fit_transform(df[numerical_columns])

# Display dataset after preprocessing
df.head()

"""The dataset has been successfully preprocessed:

1. Categorical variables have been label-encoded.

2. Numerical variables have been standardized using a scaler.

# 3. Exploratory Data Analysis (EDA)
I will conduct Exploratory Data Analysis (EDA) to visualize trends and identify key risk factors for loan default

## 3.1 Loan Status Distribution
"""

# Set plot style
sns.set_style("whitegrid")

# Plot the distribution of loan status
plt.figure(figsize=(6,4))
sns.countplot(x="loan_status", data=df, palette="coolwarm")
plt.title("Loan Status Distribution (Default vs Non-Default)")
plt.xlabel("Loan Status (0 = Non-Default, 1 = Default)")
plt.ylabel("Count")
plt.show()

"""The plot shows the distribution of loan defaults versus non-defaults. There may be an imbalance in the dataset, which could impact model training.

Next, I will analyze the relationships between key financial indicators (such as credit score, loan amount, and income) and loan default risk
"""

# Plot the relationship between credit score and loan status
plt.figure(figsize=(6,4))
sns.boxplot(x="loan_status", y="credit_score", data=df, palette="coolwarm")
plt.title("Credit Score vs Loan Status")
plt.xlabel("Loan Status (0 = Non-Default, 1 = Default)")
plt.ylabel("Credit Score (Standardized)")
plt.show()

"""The boxplot shows that borrowers with lower credit scores are more likely to default, as indicated by the lower median credit score for defaulters.

Next, I will examine the relationship between loan amount and loan status to see if higher loan amounts increase default risk.
"""

# Plot the relationship between loan amount and loan status
plt.figure(figsize=(6,4))
sns.boxplot(x="loan_status", y="loan_amnt", data=df, palette="coolwarm")
plt.title("Loan Amount vs Loan Status")
plt.xlabel("Loan Status (0 = Non-Default, 1 = Default)")
plt.ylabel("Loan Amount (Standardized)")
plt.show()

"""The boxplot suggests that higher loan amounts are associated with a greater likelihood of default. Borrowers who default tend to have higher median loan amounts than non-defaulters.

# 3.2 Correlation Analysis
##Understanding relationships between financial indicators.
 I will analyze the correlation between different financial variables and loan default risk.
"""

# Compute the correlation matrix
correlation_matrix = df.corr()

# Plot the heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Matrix of Financial Indicators")
plt.show()

"""The correlation matrix reveals key insights:

1. Credit Score has a strong negative correlation with loan default (i.e., lower credit scores are linked to higher default rates).
2. Loan Amount and Interest Rate show a positive correlation with default, suggesting that larger and costlier loans increase risk.
3. Income has a weaker correlation with loan status, indicating that other factors may play a more significant role in predicting defaults.

#  4. Machine Learning Model Development
## 4.1 Model Selection and Training
 I will proceed with machine learning model by training a Random Forest Classifier to predict loan defaults.
"""

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

# Display model performance metrics
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-score: {f1:.4f}")
print(f"ROC-AUC: {roc_auc:.4f}")

# Confusion Matrix Visualization
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot(cmap="Blues")
plt.title("Confusion Matrix")
plt.show()

"""The Random Forest model performed well in predicting loan defaults:

Accuracy: 92.8%

Precision: 88.9% (high confidence in identifying defaulters)

Recall: 77.3% (captures most defaulters)

F1-score: 82.7% (balanced measure of precision and recall)

ROC-AUC: 87.3% (good overall predictive power)

# 4.2 Predictions
I will do that by analyzing feature importance to determine which factors contribute most to loan default predictions.
"""

# Extract feature importances
feature_importances = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)

# Plot feature importance
plt.figure(figsize=(10, 5))
sns.barplot(x=feature_importances, y=feature_importances.index, palette="coolwarm")
plt.title("Feature Importance in Loan Default Prediction")
plt.xlabel("Importance Score")
plt.ylabel("Features")
plt.show()

"""The feature importance analysis reveals that the most influential factors in loan default prediction are:

Credit Score – Strongest predictor, with lower scores increasing default risk.

Loan Amount – Larger loans have a higher probability of default.

Loan Interest Rate – Higher interest rates correlate with increased risk.

Credit History Length – Longer credit histories reduce default likelihood.

Income-to-Loan Ratio – Lower ratios signal greater risk.

#  7. Business Recommendations
 - **Stronger Credit Score Requirements:** Set a minimum threshold for loan approvals.
 - **Income-Based Loan Limits:** Restrict loan amounts based on annual income.
 - **Enhanced Monitoring:** Implement additional scrutiny for high-risk applicants.
 - **Risk-Based Interest Rates:** Charge higher rates to riskier applicants.
 - **Automated Loan Approval System:** Deploy the model in real-time for better decision-making.
"""

